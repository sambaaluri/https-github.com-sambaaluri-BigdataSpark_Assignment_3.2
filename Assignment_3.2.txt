import java.io.IOException;
import java.util.StringTokenizer; 
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class FilterData 
{
      public static class FilRec 
           extends Mapper<Object, Text, Text, IntWritable>{

      private final static IntWritable one = new IntWritable(1);

      

        public void map(Object key, Text value, Context context

                        ) throws IOException, InterruptedException {

          String line = value.toString();
          
          String[] elements = line.split(",");

          String Company= elements[0];
          String Product= elements[1];
          
           if ( Company != "NA" && Product != "NA" )
           {
               context.write(value, new IntWritable());   
           }
                      
          }

       
      }

     

    public static void main(String[] args) throws Exception
    {
        Configuration conf = new Configuration();

        Job job = Job.getInstance(conf, "Filter Data");

        job.setJarByClass(FilterData.class);

        job.setMapperClass(FilRec.class);
        
        job.setOutputKeyClass(Text.class);

        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));

        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }

}